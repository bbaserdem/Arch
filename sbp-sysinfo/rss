#!/bin/dash
# vim:ft=sh
# Print number of new RSS entries
# Depends on: newsboat, inotify

# Kill all descendents on exit
trap 'exit' INT TERM
trap 'kill 0' EXIT

# Default color
if [ -z "${SBP_RSS_COLOR}" ] ; then
  SBP_RSS_COLOR='brown'
fi
# Location
if [ -z "${SBP_RSS_LOCATION}" ] ; then
  if [ -d "${HOME}/Documents/RSS" ] ; then
    SBP_RSS_LOCATION="${HOME}/Documents/RSS"
  else
    exit 1
  fi
fi

# Click commands that can be overriden through environment vars
get_actions () {
# Function to generate action list
  # Left click
  if [ -z "${SBP_RSS_LEFTCLICK}" ] ; then
    _left='true'
  else
    _left="${SBP_RSS_LEFTCLICK}"
  fi
  # Right click
  if [ -z "${SBP_RSS_RIGHTCLICK}" ] ; then
    _right="${TERMINAL} /usr/bin/newsboat"
  else
    _right="${SBP_RSS_RIGHTCLICK}"
  fi
  # Middle click
  if [ -z "${SBP_RSS_MIDDLECLICK}" ] ; then
    _middle="true"
  else
    _middle="${SBP_RSS_MIDDLECLICK}"
  fi
  # Scroll up
  if [ -z "${SBP_RSS_SCROLLUP}" ] ; then
    _up='true'
  else
    _up="${SBP_RSS_SCROLLUP}"
  fi
  # Scroll down
  if [ -z "${SBP_RSS_SCROLLDOWN}" ] ; then
    _down='true'
  else
    _down="${SBP_RSS_SCROLLDOWN}"
  fi
  # Print json
  _jsonact="{\"middle\":\"${_middle}\""
  _jsonact="${_jsonact},\"left\":\"${_left}\",\"right\":\"${_right}\""
  echo "${_jsonact},\"up\":\"${_up}\",\"down\":\"${_down}\"}"
}

get_text () {
# Parse json text that has the fields;
# * accent: Accent color (not neccessary needed)
# * prompt: Text to display
# * prefix: Icon to display at beginning
# * suffix: Icon to display at end
# * tooltip: Expanded tooltip; maybe for future
# * dim: (Boolean) To dim module or not.
  # Get number of new RSS fields
  _new="$(/usr/bin/newsboat --cache-file=/tmp/nb.tmp.db -x print-unread)"
  _txt="$(echo "${_new}" | awk '{print $1}' | head -n 1)"
  # Format fields
  if echo "${_txt}" | grep --quiet 'Error' ; then
    _mute='true'
    _new=''
  elif [ "${_txt}" = '0' ] ; then
    _mute='true'
  else
    _mute='false'
  fi
  # Print JSON string
  _json="{\"prompt\":\"${_txt}\",\"accent\":\"${SBP_RSS_COLOR}\""
  _json="${_json},\"prefix\":\" \",\"suffix\":\"\",\"dim\":${_mute}"
  echo "${_json},\"tooltip\":\"${_new}\"}"
}

# Listener loop
listener_loop () {
  # Place inotify watch on the calendar directory, or exit gracefully
  while : ; do
    inotifywait --recursive --timeout -1 \
      --event modify --event move --event create --event delete \
      "${SBP_RSS_LOCATION}" >/dev/null 2>&1 || exit 2
    get_text
    # Wait a while before trying to add watch again
    sleep 5
  done
}

# Main function
case $1 in
  actions) get_actions ;;
  once) get_text ;;
  *) get_text ; listener_loop ;;
esac
