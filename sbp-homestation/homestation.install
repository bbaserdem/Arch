# Maintained by sbp
prestr='sbp-homestation'

systemd_services() {
  if [ "${1}" = 'enable' ] ; then     action='enable'  ; prstrn='Enabling'
  elif [ "${1}" = 'disable' ] ; then  action='disable' ; prstrn='Disabling'
  elif [ -z "${1}" ] ; then           action='enable'  ; prstrn='Enabling'
  else
    echo "Invalid action type"
    exit 1
  fi
  echo '['"${prestr}"']==> '${prstrn}' systemd services!'
  # Services
  echo '['"${prestr}"']==> '"${prstrn}"' wifi.'
  /usr/bin/systemctl "${action}" iwd.service
  echo '['"${prestr}"']==> '"${prstrn}"' NBFC fan control.'
  /bin/systemctl "${action}" nbfc.service
  /bin/systemctl "${action}" nbfc-sleep.service
  echo '['"${prestr}"']==> '"${prstrn}"' Laptop power control.'
  /bin/systemctl "${action}" tlp.service
  echo '['"${prestr}"']==> Enabling Trezor for bitcoin wallet.'
  /usr/bin/systemctl enable trezord.service

  echo '['"${prestr}"']==> '"${prstrn}"' systemd services, done!'
}

pre_install() {
  echo '[sbp-cmp]==> Preparing for meta package...'
  if [ -e '/etc/fstab' ] ; then
    echo '[sbp-cmp]==> Moving /etc/fstab away.'
    mv '/etc/fstab' '/etc/fstab.system'
  fi
  if [ -e '/etc/crypttab' ] ; then
    echo '[sbp-cmp]==> Moving /etc/crypttab away.'
    mv '/etc/crypttab' '/etc/crypttab.system'
  fi
  if [ -e '/etc/mkinitcpio.conf' ] ; then
    echo '[sbp-cmp]==> Moving /etc/mkinitcpio.conf away.'
    mv '/etc/mkinitcpio.conf' '/etc/mkinitcpio.system'
  fi
  echo '[sbp-cmp]==> Preperations done!'
}

post_install() {
  echo '['"${prestr}"']==> Installing meta package...'
  systemd_services enable
  if [ -f '/opt/nbfc/Configs/Asus ROG GL702ZC.xml' ] ; then
    echo '['"${prestr}"']==> Setting fan profile to Asus ROG GL702ZC . . .'
    nbfc config --apply 'Asus ROG GL702ZC'
  fi
  if [ -e '/opt/nbfc/Plugins/StagWare.Plugins.ECSysLinux.dll' ] ; then
    echo '['"${prestr}"']==> Applying nbfc ECSysLinux.dll fix'
    mv /opt/nbfc/Plugins/StagWare.Plugins.ECSysLinux.dll \
      /opt/nbfc/Plugins/StagWare.Plugins.ECSysLinux.dll.bak
  fi

  echo '['"${prestr}"']==> Installation done!'
  post_upgrade
}

post_upgrade() {
    echo '['"${prestr}"']==> Upgrading meta package...'
    systemd_services enable
    if [ -f '/opt/nbfc/Configs/Asus ROG GL702ZC.xml' ] ; then
        echo '['"${prestr}"']==> Setting fan profile to Asus ROG GL702ZC . . .'
        nbfc config --apply 'Asus ROG GL702ZC'
    fi
    if [ -e '/opt/nbfc/Plugins/StagWare.Plugins.ECSysLinux.dll' ] ; then
        echo '['"${prestr}"']==> Applying nbfc ECSysLinux.dll fix'
        mv /opt/nbfc/Plugins/StagWare.Plugins.ECSysLinux.dll \
            /opt/nbfc/Plugins/StagWare.Plugins.ECSysLinux.dll.bak
    fi
    echo '['"${prestr}"']==> Upgrade done!'
}

post_remove() {
    echo '['"${prestr}"']==> Uninstalling meta package...'
    systemd_services disable
    if [ -e '/opt/nbfc/Plugins/StagWare.Plugins.ECSysLinux.dll.bak' ] ; then
        echo '['"${prestr}"']==> Undoing nbfc ECSysLinux.dll fix'
        mv /opt/nbfc/Plugins/StagWare.Plugins.ECSysLinux.dll.bak \
            /opt/nbfc/Plugins/StagWare.Plugins.ECSysLinux.dll
    fi
    echo '['"${prestr}"']==> Uninstallation done!'
}
